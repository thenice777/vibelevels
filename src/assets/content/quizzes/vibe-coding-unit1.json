
{
  "course": "Vibe Coding",
  "unit1": {
    "title": "Foundations of Vibe Coding",
    "xpRewards": {
      "correctAnswer": 5,
      "quizCompletion80": 25,
      "quizCompletion100": 40,
      "challengeCompletion80": 50,
      "challengeCompletion100": 75
    },
    "levels": [
      {
        "level": 1,
        "title": "Introduction to Vibe Coding",
        "quiz": {
          "title": "Vibe Coding Fundamentals",
          "questions": [
            {
              "id": "1-1-1",
              "question": "What is the most accurate definition of vibe coding?",
              "options": [
                "Traditional programming with a focus on aesthetics",
                "AI-driven software development through conversation with AI tools",
                "A specific programming language for beginners",
                "Programming with a team of remote developers"
              ],
              "correctAnswer": 1,
              "explanation": "Vibe coding is about leveraging AI assistants to create software through conversation rather than writing all code manually, making development more accessible and often faster."
            },
            {
              "id": "1-1-2",
              "question": "According to experienced AI developers, what principle best describes the relationship between prompt quality and output quality?",
              "options": [
                "The shorter the prompt, the better the output",
                "Garbage in, garbage out",
                "AI always produces perfect code regardless of the prompt",
                "Prompts should always be as technical as possible"
              ],
              "correctAnswer": 1,
              "explanation": "The 'garbage in, garbage out' principle highlights that the quality of your prompts directly impacts the quality of the AI's output. Clear, detailed prompts lead to better results."
            },
            {
              "id": "1-1-3",
              "question": "What step should precede actual coding when using AI tools for development?",
              "options": [
                "Setting up a GitHub repository",
                "Learning advanced programming concepts",
                "Defining a clear vision and planning UI/UX",
                "Writing test cases"
              ],
              "correctAnswer": 2,
              "explanation": "Before coding begins, developers should have a clear vision of what they want to build and plan the UI/UX carefully. This foundation helps AI tools understand the goals and produce relevant code."
            },
            {
              "id": "1-1-4",
              "question": "Which approach is recommended when building complex features with AI coding tools?",
              "options": [
                "Use a single, comprehensive prompt describing the entire feature",
                "Break down the feature into smaller, manageable components",
                "Let the AI decide how to approach the feature",
                "Focus only on the UI aspects first, then add functionality later"
              ],
              "correctAnswer": 1,
              "explanation": "Breaking down complex features into smaller, manageable requests prevents AI hallucination and produces better results than attempting to build an entire feature in one prompt."
            },
            {
              "id": "1-1-5",
              "question": "What is the recommended approach when an AI generates code with errors or goes in the wrong direction?",
              "options": [
                "Keep working with the incorrect code and fix it incrementally",
                "Switch to a different AI tool immediately",
                "Restart with a refined prompt rather than building on flawed code",
                "Always manually code any sections where the AI made errors"
              ],
              "correctAnswer": 2,
              "explanation": "When an AI produces incorrect code, it's often more efficient to refine your prompt and restart rather than trying to fix the errors incrementally, as the AI may introduce new issues while trying to fix existing ones."
            }
          ]
        }
      },
      {
        "level": 2,
        "title": "Context Management & Error Handling",
        "quiz": {
          "title": "Mastering Context & Debugging",
          "questions": [
            {
              "id": "1-2-1",
              "question": "Which of these is most important when providing context to an AI coding assistant?",
              "options": [
                "Including every file in your codebase",
                "Providing only the most relevant files that will be modified",
                "Always starting with a clean context for each request",
                "Only providing TypeScript type definitions"
              ],
              "correctAnswer": 1,
              "explanation": "Providing relevant context is crucial - too little context leads to errors, but too much overwhelms the AI. Focus on sharing the specific files that will be modified or are directly relevant to your request."
            },
            {
              "id": "1-2-2",
              "question": "When should you start a new chat session with an AI coding assistant?",
              "options": [
                "After every successful code generation",
                "Only when switching projects",
                "When the chat gets very large and context is being lost",
                "Never, as context is important for continuity"
              ],
              "correctAnswer": 2,
              "explanation": "When a chat becomes too large, the AI's context window becomes filled and it may forget earlier patterns or requirements. Starting fresh with a brief summary of what you're working on helps maintain quality."
            },
            {
              "id": "1-2-3",
              "question": "What is the recommended approach for debugging persistent errors that the AI can't solve after multiple attempts?",
              "options": [
                "Always rewrite the entire component from scratch",
                "Ask the AI to analyze components and add strategic logging statements",
                "Immediately switch to manual coding without AI",
                "Try a completely different implementation approach without investigation"
              ],
              "correctAnswer": 1,
              "explanation": "For stubborn errors, a systematic approach helps: ask the AI to review components for potential issues, add strategic logging, and then provide those logs back to the AI to help it diagnose the problem more effectively."
            },
            {
              "id": "1-2-4",
              "question": "How can you help an AI model maintain consistency across components in a large project?",
              "options": [
                "Rewrite your entire codebase frequently",
                "Use a different AI for each component",
                "Reference existing similar components when requesting new ones",
                "Keep all components in a single file"
              ],
              "correctAnswer": 2,
              "explanation": "Showing the AI examples of existing components helps it pick up on your patterns and maintain consistency across the codebase, reducing the need for rework and standardizing your approach."
            },
            {
              "id": "1-2-5",
              "question": "Which tool combination is recommended for iterative code review in an AI-assisted workflow?",
              "options": [
                "Use the same AI tool for both development and review",
                "Use Gemini for security review then apply fixes with Claude/Cursor",
                "Rely solely on automated linting tools",
                "Have a human reviewer check all AI-generated code"
              ],
              "correctAnswer": 1,
              "explanation": "A powerful workflow is to use Gemini's large context window to review code for security issues or bad patterns, then use Claude in Cursor to implement the suggested fixes, creating an iterative improvement cycle."
            }
          ]
        }
      },
      {
        "level": 3,
        "title": "Project Organization & Best Practices",
        "quiz": {
          "title": "Technical Planning & Architecture",
          "questions": [
            {
              "id": "1-3-1",
              "question": "Why is Git described as 'your best friend' when working with AI coding tools?",
              "options": [
                "It automatically fixes AI-generated code errors",
                "It allows easy rollback when AI makes destructive changes",
                "It generates better prompts for AI tools",
                "It replaces the need for AI tools entirely"
              ],
              "correctAnswer": 1,
              "explanation": "Version control with Git is essential when working with AI tools because it allows you to easily revert to a working state if the AI introduces errors or makes unwanted changes that break your codebase."
            },
            {
              "id": "1-3-2",
              "question": "Which tech stack is particularly well-suited for AI-assisted development according to experienced developers?",
              "options": [
                "Angular with MongoDB and Express",
                "Next.js with Supabase, Tailwind CSS, and Vercel",
                "Vue.js with Firebase",
                "Ruby on Rails with PostgreSQL"
              ],
              "correctAnswer": 1,
              "explanation": "Next.js, Supabase, Tailwind CSS, and Vercel form a modern stack that's well-documented, widely used (meaning AI tools understand it well), and reduces boilerplate code, making it ideal for AI-assisted development."
            },
            {
              "id": "1-3-3",
              "question": "What is the purpose of maintaining an 'Instructions Folder' in your project?",
              "options": [
                "To store user documentation",
                "To provide examples and documentation that guide the AI",
                "To keep track of deployment instructions",
                "To document API endpoints"
              ],
              "correctAnswer": 1,
              "explanation": "An Instructions Folder with markdown files and component examples provides consistent guidance to AI tools, helping them understand your project patterns and requirements more effectively."
            },
            {
              "id": "1-3-4",
              "question": "What should you maintain to help prevent AI tools from making the same mistakes repeatedly?",
              "options": [
                "A complex prompt template",
                "Multiple AI assistants for different tasks",
                "A 'Common AI Mistakes' file to reference in prompts",
                "Weekly retraining of the AI model"
              ],
              "correctAnswer": 2,
              "explanation": "Keeping a file of common mistakes that your AI tool tends to make and referencing it in your prompts helps prevent the AI from repeating those errors, saving time and frustration."
            },
            {
              "id": "1-3-5",
              "question": "Which security practice is MOST important when handling sensitive data in AI-assisted development?",
              "options": [
                "Putting all API keys directly in frontend code for easier access",
                "Keeping secrets server-side only using environment variables",
                "Sharing sensitive information in every prompt for context",
                "Displaying detailed error messages to help with debugging"
              ],
              "correctAnswer": 1,
              "explanation": "Sensitive data like API keys should never be in frontend code. Keep secrets server-side only, using environment variables and ensuring your .env file is in .gitignore, as AI tools might not always recognize sensitive information."
            }
          ]
        }
      }
    ],
    "challenge": {
      "title": "Professional Vibe Coding Implementation",
      "description": "You're tasked with building a SaaS application with a team using AI tools. Apply your knowledge to implement best practices for collaboration.",
      "questions": [
        {
          "id": "1-c-1",
          "question": "Your team is starting a new project using AI tools. What should be established FIRST?",
          "options": [
            "Setting up the GitHub repository structure",
            "A clear vision document and UI/UX plan",
            "Choosing which AI tools each team member will use",
            "Writing the first lines of code with AI assistance"
          ],
          "correctAnswer": 1,
          "explanation": "Before diving into code, establish a clear vision and UI/UX plan that all team members understand. This creates alignment and provides consistent guidance for AI tools, regardless of which team member is writing prompts."
        },
        {
          "id": "1-c-2",
          "question": "What's the most effective way to maintain consistency across components when multiple team members are using AI tools?",
          "options": [
            "Each developer should use their preferred styling approach",
            "Set up linting rules and formatter tools, and create a shared Cursor Rules file",
            "Restrict AI usage to a single team member",
            "Manually review and fix inconsistencies at the end of development"
          ],
          "correctAnswer": 1,
          "explanation": "A shared Cursor Rules file with established patterns, combined with automated linting and formatting tools, ensures consistency across the codebase regardless of which developer worked on which component with AI assistance."
        },
        {
          "id": "1-c-3",
          "question": "A team member has generated code that works but doesn't follow the project's patterns. What's the BEST approach?",
          "options": [
            "Leave it as is since it works",
            "Completely rewrite it manually",
            "Ask the AI to refactor it to match established patterns and styles",
            "Create a new pattern based on this code"
          ],
          "correctAnswer": 2,
          "explanation": "AI tools excel at refactoring. Providing existing patterns and asking the AI to refactor the functional but inconsistent code maintains both functionality and consistency, which is essential for maintainable codebases."
        },
        {
          "id": "1-c-4",
          "question": "Which approach helps prevent security vulnerabilities in AI-generated code?",
          "options": [
            "Trusting that AI always generates secure code",
            "Running security scans on generated code and having explicit security checkpoints",
            "Only using AI for UI components, never backend code",
            "Rewriting all AI-generated code manually"
          ],
          "correctAnswer": 1,
          "explanation": "AI tools don't always prioritize security. Explicitly scanning code for vulnerabilities, implementing proper validation, and having security checkpoints ensures AI-generated code doesn't introduce vulnerabilities accidentally."
        },
        {
          "id": "1-c-5",
          "question": "What's the most efficient workflow for implementing a large feature using AI tools?",
          "options": [
            "Generate the entire feature at once with a single comprehensive prompt",
            "Create a feature plan, break it into components, implement each separately, then integrate",
            "Generate random components and connect them later",
            "Let each team member build their own version and choose the best one"
          ],
          "correctAnswer": 1,
          "explanation": "Breaking down large features into planned components with clear interfaces between them allows for more focused AI prompts, better quality output, and easier testing and integration of the complete feature."
        }
      ]
    },
    "advancedTopics": [
      {
        "title": "AI Tool Selection & Specialization",
        "quiz": {
          "title": "Advanced Topic: AI Tool Selection",
          "questions": [
            {
              "id": "1-a1-1",
              "question": "According to experienced developers, what is Cursor's greatest strength?",
              "options": [
                "UI design and generation",
                "Backend logic and complex algorithmic tasks",
                "Database schema design",
                "Project planning"
              ],
              "correctAnswer": 1,
              "explanation": "Cursor particularly excels at backend logic development and complex algorithmic tasks where its contextual understanding of code can significantly speed up development compared to other AI tools."
            },
            {
              "id": "1-a1-2",
              "question": "What is the advantage of using Cursor Rules when working on a project?",
              "options": [
                "It automatically writes all code without any input",
                "It provides guardrails and consistent patterns for the AI to follow",
                "It bypasses the need for proper planning",
                "It makes the code compile faster"
              ],
              "correctAnswer": 1,
              "explanation": "Cursor Rules act as guardrails for AI, providing consistent patterns, best practices, and technical preferences that help maintain quality and consistency throughout the development process."
            },
            {
              "id": "1-a1-3",
              "question": "What's the recommended approach for UI/UX planning when using AI coding tools?",
              "options": [
                "Skip planning and let the AI design as it builds",
                "Use tools like v0 or 21st.dev for visualization before coding",
                "Always code the UI manually without AI",
                "Focus only on functionality, not design"
              ],
              "correctAnswer": 1,
              "explanation": "Tools like v0 or component libraries from 21st.dev help visualize and experiment with layouts early, creating a clear plan before coding begins, which leads to more consistent and effective AI-generated UI components."
            },
            {
              "id": "1-a1-4",
              "question": "When would Google's Gemini 2.5 Pro be most useful in the AI development workflow?",
              "options": [
                "For writing small UI components",
                "For initial project planning and code review/security analysis",
                "For database migrations",
                "For deployment automation"
              ],
              "correctAnswer": 1,
              "explanation": "Gemini 2.5 Pro's large context window makes it particularly valuable for initial project planning (structuring thoughts and outlining product goals) and for reviewing large sections of code for security vulnerabilities or optimization opportunities."
            },
            {
              "id": "1-a1-5",
              "question": "What's the benefit of using multiple specialized AI tools instead of relying on just one?",
              "options": [
                "It's more impressive to clients",
                "Different AI models excel at different tasks (planning, UI, logic, security)",
                "Multiple AIs work faster than one",
                "It's required for proper licensing"
              ],
              "correctAnswer": 1,
              "explanation": "Different AI models have distinct strengths—some excel at UI generation, others at complex logic, and others at planning or security analysis. Using specialized tools for different tasks creates a more powerful workflow."
            }
          ]
        }
      },
      {
        "title": "Security & Quality Control",
        "quiz": {
          "title": "Advanced Topic: Security Essentials",
          "questions": [
            {
              "id": "1-a2-1",
              "question": "Which security vulnerability is characterized by using form/URL input directly without validation?",
              "options": [
                "Leaky Errors",
                "Weak Authorization",
                "Trusting Client Data",
                "No Ownership Checks"
              ],
              "correctAnswer": 2,
              "explanation": "Trusting Client Data is a common security vulnerability where input from forms or URLs is used directly without proper validation or sanitization. Always validate and sanitize on the server and escape output."
            },
            {
              "id": "1-a2-2",
              "question": "What is IDOR in the context of web security?",
              "options": [
                "Interactive Document Object Rendering",
                "Insecure Direct Object Reference - allowing access to others' data via predictable IDs",
                "Internal Database Operation Reconciliation",
                "Integrated Development Object Resolution"
              ],
              "correctAnswer": 1,
              "explanation": "IDOR (Insecure Direct Object Reference) is when a user can access or edit another user's data via predictable IDs without proper authorization checks, a common issue in AI-generated code that doesn't verify resource ownership."
            },
            {
              "id": "1-a2-3",
              "question": "Which security practice is recommended for database-level protection?",
              "options": [
                "Only implementing checks in the application code",
                "Using plain-text passwords with strong encryption",
                "Defining data access rules directly in the database (e.g., Row-Level Security)",
                "Storing sensitive data in localStorage"
              ],
              "correctAnswer": 2,
              "explanation": "Define data access rules directly in your database using features like Row-Level Security (RLS). This provides an additional security layer beyond application code and protects data even if application-level checks are bypassed."
            },
            {
              "id": "1-a2-4",
              "question": "What is the proper way to handle secrets like API keys in a frontend application?",
              "options": [
                "Store them in environment variables that are only accessible server-side",
                "Encrypt them and include them in client-side code",
                "Store them in localStorage for persistence",
                "Hardcode them in the application for fastest access"
              ],
              "correctAnswer": 0,
              "explanation": "API keys and credentials should never be in client-side code. Keep secrets server-side only using environment variables, and ensure your .env file is in .gitignore to prevent accidental exposure."
            },
            {
              "id": "1-a2-5",
              "question": "What is the recommended practice for error handling from a security perspective?",
              "options": [
                "Show detailed stack traces to help users report bugs",
                "Log all errors with user information for tracking",
                "Show generic error messages to users while logging details for developers",
                "Disable all error reporting in production"
              ],
              "correctAnswer": 2,
              "explanation": "From a security perspective, show generic error messages to users to avoid revealing implementation details, while still logging detailed information for developers to troubleshoot issues."
            }
          ]
        }
      },
      {
        "title": "Advanced Prompt Engineering",
        "quiz": {
          "title": "Advanced Topic: Prompt Engineering",
          "questions": [
            {
              "id": "1-a3-1",
              "question": "What technique can help prevent AI tools from making unwanted changes to your code?",
              "options": [
                "Writing extremely long prompts",
                "Including explicit instructions like 'do not change anything I did not ask for'",
                "Using technical jargon in every prompt",
                "Avoiding any specific instructions"
              ],
              "correctAnswer": 1,
              "explanation": "Being explicit about boundaries helps prevent AI tools from making unwanted changes. Including clear instructions like 'do not change anything I did not ask for' helps maintain control over what the AI modifies."
            },
            {
              "id": "1-a3-2",
              "question": "When crafting prompts for complex features, what approach yields the best results?",
              "options": [
                "Using technical jargon to impress the AI",
                "Being as concise as possible",
                "Being detailed and specific, leaving no room for the AI to guess",
                "Using abstract descriptions to allow creative freedom"
              ],
              "correctAnswer": 2,
              "explanation": "Detailed, specific prompts that leave no room for guesswork produce the best results. Vague prompts lead to inconsistent outputs, while overly detailed prompts help the AI understand exactly what you need."
            },
            {
              "id": "1-a3-3",
              "question": "What is a recommended approach for creating better prompts for complex features?",
              "options": [
                "Always write them from scratch",
                "Use Gemini to help craft detailed versions of your prompts",
                "Keep them as short as possible",
                "Focus only on technical aspects"
              ],
              "correctAnswer": 1,
              "explanation": "Using tools like Gemini to help craft detailed versions of your prompts can significantly improve their quality. This 'prompting the prompt' approach helps create comprehensive instructions that lead to better code generation."
            },
            {
              "id": "1-a3-4",
              "question": "What information should you include when starting a new chat after the context window is full?",
              "options": [
                "Your entire project requirements document",
                "A brief description of the feature you're working on and relevant files",
                "Your company's business model",
                "Personal information to personalize the experience"
              ],
              "correctAnswer": 1,
              "explanation": "When starting a new chat, provide a brief description of the feature you're working on and mention the relevant files. This gives the AI enough context without overwhelming it with unnecessary information."
            },
            {
              "id": "1-a3-5",
              "question": "Which approach is most effective when the AI produces incorrect or unexpected code?",
              "options": [
                "Accept the code and try to work around the issues",
                "Immediately switch to manual coding",
                "Provide specific feedback about what's wrong and request corrections",
                "Start a completely new project"
              ],
              "correctAnswer": 2,
              "explanation": "When AI produces incorrect code, providing specific feedback about what's wrong and requesting corrections is most effective. This iterative refinement helps the AI understand your requirements better."
            }
          ]
        }
      },
      {
        "title": "Debugging & Error Resolution",
        "quiz": {
          "title": "Advanced Topic: Debugging Strategies",
          "questions": [
            {
              "id": "1-a4-1",
              "question": "What is the recommended approach when facing persistent errors in AI-generated code?",
              "options": [
                "Keep trying the same approach until it works",
                "Use a systematic debugging approach with logging and code review",
                "Always revert to manual coding immediately",
                "Deploy the code anyway and fix issues in production"
              ],
              "correctAnswer": 1,
              "explanation": "A systematic approach to debugging with strategic logging and reviewing potential error sources is more effective than repeated attempts with the same approach or immediately abandoning AI assistance."
            },
            {
              "id": "1-a4-2",
              "question": "What is the '3 attempts' guideline for handling errors with AI tools?",
              "options": [
                "Always give the AI exactly 3 chances to fix any bug",
                "If the AI can't solve an error after about 3 attempts, refine your prompt or approach",
                "Test each feature exactly 3 times before deployment",
                "Use 3 different AI tools for each problem"
              ],
              "correctAnswer": 1,
              "explanation": "If the AI has made multiple attempts (around 3) to fix an error without success, it's likely stuck in a loop. At this point, it's more efficient to step back, refine your approach, and try a different angle rather than continuing with the same strategy."
            },
            {
              "id": "1-a4-3",
              "question": "What debugging technique is particularly effective with AI coding assistants?",
              "options": [
                "Waiting for the AI to figure out the problem on its own",
                "Strategic logging and providing the output back to the AI",
                "Rewriting the entire codebase",
                "Deployment to production to test with real users"
              ],
              "correctAnswer": 1,
              "explanation": "Strategic console logging at key points helps identify where issues occur. Providing these logs back to the AI gives it concrete information about the code's behavior, making it much more effective at pinpointing and fixing problems."
            },
            {
              "id": "1-a4-4",
              "question": "What should you do when you notice the AI is producing increasingly complex or convoluted solutions?",
              "options": [
                "Accept the complexity as necessary",
                "Push for simplicity and ask the AI to explain its approach",
                "Always choose the most complex solution",
                "Stop using AI tools entirely"
              ],
              "correctAnswer": 1,
              "explanation": "AI tools often produce overly complex 'textbook-perfect' solutions. Push back and explicitly ask for simpler approaches, and always ask the AI to explain its solution so you understand what it's doing and why."
            },
            {
              "id": "1-a4-5",
              "question": "What is 'vibe debugging' and why should it be avoided?",
              "options": [
                "Using AI to write unit tests - it's highly recommended",
                "Asking the AI to debug without understanding the issue yourself - it should be avoided",
                "A special debugging mode in modern AI tools",
                "Collaborative debugging with multiple developers"
              ],
              "correctAnswer": 1,
              "explanation": "'Vibe debugging' refers to blindly asking AI to fix bugs without trying to understand the issue yourself. This often leads to endless loops of problems. Use AI as an assistant, not a replacement for critical thinking in debugging."
            }
          ]
        }
      },
      {
        "title": "Project Management & Scaling",
        "quiz": {
          "title": "Advanced Topic: Project Management",
          "questions": [
            {
              "id": "1-a5-1",
              "question": "What is the biggest limitation of AI in project development according to experienced developers?",
              "options": [
                "Speed limitations",
                "Language constraints",
                "Inability to see the big picture and connect components meaningfully",
                "Cost of API calls"
              ],
              "correctAnswer": 2,
              "explanation": "AI excels at isolated tasks but struggles to connect them meaningfully into a cohesive system. It doesn't maintain the full vision of a project, which is why human architects remain essential for the big picture."
            },
            {
              "id": "1-a5-2",
              "question": "What role should human developers play when using AI tools for development?",
              "options": [
                "Code generation",
                "Project architect who maintains the big picture vision",
                "Documentation writer",
                "UI designer"
              ],
              "correctAnswer": 1,
              "explanation": "Humans should serve as project architects who maintain the big picture vision, make key architectural decisions, and connect AI-generated components meaningfully - tasks that AI still struggles with."
            },
            {
              "id": "1-a5-3",
              "question": "Which aspect of development typically remains primarily the developer's responsibility even in AI-assisted development?",
              "options": [
                "Writing HTML templates",
                "Creating CSS styles",
                "Debugging complex issues and system architecture",
                "Writing basic CRUD operations"
              ],
              "correctAnswer": 2,
              "explanation": "Complex debugging and system architecture remain primarily the developer's responsibility. AI tools may help with isolated components but struggle with complex system issues that require deep understanding."
            },
            {
              "id": "1-a5-4",
              "question": "How should version control be handled in AI-assisted projects?",
              "options": [
                "Avoid version control since AI might modify previous code",
                "Keep separate repositories for AI-generated and human-written code",
                "Use standard version control with clear commit messages about functionality",
                "Only commit code after it's been completely rewritten by humans"
              ],
              "correctAnswer": 2,
              "explanation": "Use standard version control practices with clear commit messages about what the code does, regardless of whether it was AI-generated or human-written. Focus on functionality rather than source in commit messages."
            },
            {
              "id": "1-a5-5",
              "question": "What is a strategic disadvantage of relying too heavily on AI for coding without proper oversight?",
              "options": [
                "The code will run too slowly",
                "It's more expensive than manual coding",
                "You might build technical debt through poor architecture",
                "AI-generated code always has license issues"
              ],
              "correctAnswer": 2,
              "explanation": "Without maintaining architectural vision and proper oversight, AI-assisted development can lead to technical debt through disconnected components. Human architecture and oversight remain essential."
            }
          ]
        }
      },
      {
        "title": "Final Assessment: Holistic Vibe Coding Strategy",
        "quiz": {
          "title": "Advanced Topic: Holistic Strategy",
          "questions": [
            {
              "id": "1-a6-1",
              "question": "Which combination of practices creates the strongest foundation for successful AI-assisted development?",
              "options": [
                "Using the newest AI models and focusing solely on prompt engineering",
                "Clear vision, planned UI/UX, version control, and breaking complex features into manageable parts",
                "Maximizing AI usage for every part of development without human oversight",
                "Using AI only for simple tasks and coding everything important manually"
              ],
              "correctAnswer": 1,
              "explanation": "Successful vibe coding requires a holistic approach: clear vision and UI/UX planning provide direction, version control provides safety, and breaking features into parts allows for focused, high-quality AI output."
            },
            {
              "id": "1-a6-2",
              "question": "What represents the ideal balance of AI and human involvement in development?",
              "options": [
                "AI handles everything while humans only review the final product",
                "Humans maintain architecture and oversight while AI assists with implementation",
                "AI handles planning while humans do all coding",
                "Humans and AI work completely independently on different parts"
              ],
              "correctAnswer": 1,
              "explanation": "The ideal balance is for humans to maintain architectural vision, make key decisions, and provide oversight, while AI assists with implementation details, code generation, and solving specific problems within that framework."
            },
            {
              "id": "1-a6-3",
              "question": "Which approach to AI tool usage maximizes productivity while maintaining code quality?",
              "options": [
                "Using a single AI tool for all tasks",
                "Strategically using specialized AI tools for their strengths with consistent patterns",
                "Randomly trying different AI tools until one works",
                "Minimizing AI usage to occasional assistance only"
              ],
              "correctAnswer": 1,
              "explanation": "Productivity and quality come from strategically using different AI tools for their strengths (planning, UI, logic, security) while maintaining consistent patterns through shared guidelines like Cursor Rules."
            },
            {
              "id": "1-a6-4",
              "question": "What best describes a mature approach to handling AI limitations?",
              "options": [
                "Expecting AI to eventually solve all issues without human input",
                "Recognizing AI strengths and limitations, and designing workflows that account for them",
                "Avoiding AI usage for any critical features",
                "Switching AI tools whenever a limitation is encountered"
              ],
              "correctAnswer": 1,
              "explanation": "A mature approach recognizes both AI strengths and limitations, designing workflows that leverage AI for what it does well while accounting for areas where human judgment and oversight remain necessary."
            },
            {
              "id": "1-a6-5",
              "question": "What is the ultimate goal of vibe coding as a development approach?",
              "options": [
                "Eliminating the need for human developers",
                "Creating technically impressive but impractical applications",
                "Accelerating development while maintaining quality through human-AI collaboration",
                "Minimizing development costs regardless of quality"
              ],
              "correctAnswer": 2,
              "explanation": "The goal of vibe coding is to accelerate development and make it more accessible while maintaining quality through effective human-AI collaboration, not to eliminate human involvement or compromise on quality standards."
            }
          ]
        }
      }
    ],
    "badges": [
      {
        "id": "vibe-apprentice",
        "name": "Vibe Apprentice",
        "requirement": "Complete all quizzes in Unit 1"
      },
      {
        "id": "perfect-planner",
        "name": "Perfect Planner",
        "requirement": "Score 100% on the Project Planning Assessment"
      },
      {
        "id": "requirement-master",
        "name": "Requirement Master",
        "requirement": "Answer all requirement-related questions correctly"
      },
      {
        "id": "security-sentinel",
        "name": "Security Sentinel",
        "requirement": "Correctly answer all security-related questions"
      },
      {
        "id": "tool-strategist",
        "name": "Tool Strategist",
        "requirement": "Score 100% on the Multi-Tool Mastery quiz"
      },
      {
        "id": "context-keeper",
        "name": "Context Keeper",
        "requirement": "Answer all context management questions correctly"
      },
      {
        "id": "bug-hunter",
        "name": "Bug Hunter",
        "requirement": "Score 100% on debugging-related questions"
      },
      {
        "id": "lovable-designer",
        "name": "Lovable Designer",
        "requirement": "Master the UI generation questions"
      },
      {
        "id": "speed-demon",
        "name": "Speed Demon",
        "requirement": "Complete a quiz in record time while maintaining high accuracy"
      },
      {
        "id": "architect-mindset",
        "name": "Architect Mindset",
        "requirement": "Score 100% on questions about maintaining the big picture"
      },
      {
        "id": "responsible-viber",
        "name": "Responsible Viber",
        "requirement": "Complete the Framework for Professional Vibe Coding assessment with 100%"
      }
    ],
    "levelSystem": [
      {
        "level": 1,
        "name": "Vibe Novice",
        "xpRange": "0-100"
      },
      {
        "level": 2,
        "name": "Vibe Explorer",
        "xpRange": "101-250"
      },
      {
        "level": 3,
        "name": "Vibe Practitioner",
        "xpRange": "251-500"
      },
      {
        "level": 4,
        "name": "Vibe Expert",
        "xpRange": "501-1000"
      },
      {
        "level": 5,
        "name": "Vibe Master",
        "xpRange": "1001+"
      }
    ]
  }
}
